parameters:
  - name: VSCODE_ARCH
    type: string
    default: x64

steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: $(ARTIFACT_PREFIX)vscode_client_win32_${{ parameters.VSCODE_ARCH }}_archive
      targetPath: $(Agent.TempDirectory)\vscode_client_archive

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)\vscode_client_archive\*.zip'
      destinationFolder: $(Agent.BuildDirectory)\scanbin

  - pwsh: |
      mkdir .build -ea 0
      node build/azure-pipelines/common/computeNodeModulesCacheKey.js win32 ${{ parameters.VSCODE_ARCH }} > .build/yarnlockhash
    displayName: Prepare node_modules cache key

  - task: Cache@2
    inputs:
      key: '"node_modules" | .build/yarnlockhash'
      path: .build/node_modules_cache
      cacheHitVar: NODE_MODULES_RESTORED
    displayName: Restore node_modules cache

  - powershell: |
      if ($env:NODE_MODULES_RESTORED -eq 'true') {
        7z.exe x .build/node_modules_cache/cache.7z -aoa
      } else {
        echo 'Failed to restore node modules cache'
        exit 1
      }
    displayName: Extract node_modules cache

  - powershell: yarn gulp 'vscode-symbols-win32-${{ parameters.VSCODE_ARCH }}'
    env:
      GITHUB_TOKEN: $(github-distro-mixin-password)
    displayName: Download Symbols

  - task: BinSkim@4
    inputs:
      InputType: "Basic"
      Function: "analyze"
      TargetPattern: "guardianGlob"
      AnalyzeIgnorePdbLoadError: true
      AnalyzeTargetGlob: '$(Agent.BuildDirectory)\scanbin\**.dll;$(Agent.BuildDirectory)\scanbin\**.exe;$(Agent.BuildDirectory)\scanbin\**.node'
      AnalyzeLocalSymbolDirectories: '$(Agent.BuildDirectory)\scanbin\VSCode-win32-${{ parameters.VSCODE_ARCH }}\pdb'

  - ${{ if eq(parameters.VSCODE_ARCH, 'x64') }}:
    - task: CopyFiles@2
      displayName: 'Collect Symbols for API Scan'
      inputs:
        SourceFolder: $(Agent.BuildDirectory)
        Contents: 'scanbin\**\*.pdb'
        TargetFolder: '$(Agent.BuildDirectory)\symbols'
        flattenFolders: true
      condition: succeeded()

    # - task: APIScan@2
    #   inputs:
    #     softwareFolder: $(Agent.BuildDirectory)\scanbin
    #     softwareName: 'vscode-client'
    #     softwareVersionNum: '1'
    #     symbolsFolder: 'SRV*https://symweb.azurefd.net;$(Agent.BuildDirectory)\symbols'
    #     isLargeApp: false
    #     toolVersion: 'Latest'
    #   displayName: Run ApiScan
    #   condition: succeeded()
    #   env:
    #     AzureServicesAuthConnectionString: $(apiscan-connectionstring)

    - task: PublishSecurityAnalysisLogs@3
      inputs:
        ArtifactName: CodeAnalysisLogs
        ArtifactType: Container
        PublishProcessedResults: false
        AllTools: true
